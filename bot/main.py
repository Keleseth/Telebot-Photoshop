import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession

from bot.config import config
from bot.handlers import (
    start,
    photos
)


async def main():
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
    )

    # –°–µ—Å—Å–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    session = AiohttpSession(
        timeout=30  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API
    )

    bot = Bot(
        token=config.bot_token.get_secret_value(),
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML
        )
    )

    # FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ø–∞–º—è—Ç—å ‚Äî –¥–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º Redis)
    storage = MemoryStorage()

    dp = Dispatcher(storage=storage)
    dp.include_router(start.router)
    dp.include_router(photos.router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏–∑ –ø–∞–∫–µ—Ç–∞ handlers
    # register_all_handlers(dp) #TODO –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—Å–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    try:
        logging.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        await dp.start_polling(
            bot, allowed_updates=dp.resolve_used_update_types()
        )
    except Exception as e:
        logging.exception(f'–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}')
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
